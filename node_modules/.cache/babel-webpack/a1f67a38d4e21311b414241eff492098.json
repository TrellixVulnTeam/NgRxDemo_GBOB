{"ast":null,"code":"import { getMaskedValue, getEmployees, getError } from './state/login.reducer';\nimport * as LoginAction from './state/login.action';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@ngrx/store\";\nimport * as i2 from \"@angular/common\";\n\nfunction LoginComponent_div_23_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const employee_r2 = ctx.$implicit;\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate2(\" Employee Id : \", employee_r2.id, \" Employee Name: \", employee_r2.employee_name, \" \");\n  }\n}\n\nfunction LoginComponent_div_25_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵelementStart(0, \"div\");\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n\n  if (rf & 2) {\n    const ctx_r1 = i0.ɵɵnextContext();\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate1(\" Error : \", ctx_r1.emp, \" \");\n  }\n}\n\nexport class LoginComponent {\n  constructor(store) {\n    this.store = store;\n    this.displayCode = true;\n  }\n\n  ngOnInit() {\n    console.log(\"Inside logger component\"); // Here we were hardcoding the login part so now will remove it with the selector\n\n    this.store.select(getMaskedValue).subscribe(maskedValue => {\n      //if(response) { because we have initilaized the initial state.\n      this.displayCode = maskedValue; // As masked value is directly getting returned so directly binding the value.\n      //}\n    });\n    this.employee$ = this.store.select(getEmployees);\n    this.employeeError$ = this.store.select(getError);\n    this.store.dispatch(LoginAction.loadEmployee());\n  } //changing the hardcoded state to the new export created for action\n\n\n  checkBoxChanged(event) {\n    this.store.dispatch(LoginAction.toggleUsername());\n  }\n\n}\n\nLoginComponent.ɵfac = function LoginComponent_Factory(t) {\n  return new (t || LoginComponent)(i0.ɵɵdirectiveInject(i1.Store));\n};\n\nLoginComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: LoginComponent,\n  selectors: [[\"app-login\"]],\n  decls: 27,\n  vars: 7,\n  consts: [[1, \"mb-3\"], [\"for\", \"exampleInputEmail1\", 1, \"form-label\"], [\"type\", \"email\", \"id\", \"exampleInputEmail1\", \"aria-describedby\", \"emailHelp\", 1, \"form-control\"], [\"id\", \"emailHelp\", 1, \"form-text\"], [\"for\", \"exampleInputPassword1\", 1, \"form-label\"], [\"type\", \"password\", \"id\", \"exampleInputPassword1\", 1, \"form-control\"], [1, \"row\"], [1, \"col\", \"mb-3\", \"form-check\"], [\"type\", \"checkbox\", \"id\", \"exampleCheck1\", 1, \"form-check-input\"], [\"for\", \"exampleCheck1\", 1, \"form-check-label\"], [1, \"col\", \"@mb-3\", \"form-check\"], [\"type\", \"checkbox\", \"id\", \"exampleCheck2\", 1, \"form-check-input\", 3, \"checked\", \"change\"], [\"type\", \"submit\", 1, \"btn\", \"btn-primary\"], [4, \"ngFor\", \"ngForOf\"], [4, \"ngIf\"]],\n  template: function LoginComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\");\n      i0.ɵɵelementStart(1, \"div\", 0);\n      i0.ɵɵelementStart(2, \"label\", 1);\n      i0.ɵɵtext(3, \"Email address\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(4, \"input\", 2);\n      i0.ɵɵelementStart(5, \"div\", 3);\n      i0.ɵɵtext(6, \"We'll never share your email with anyone else.\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(7, \"div\", 0);\n      i0.ɵɵelementStart(8, \"label\", 4);\n      i0.ɵɵtext(9, \"Password\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(10, \"input\", 5);\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(11, \"div\", 6);\n      i0.ɵɵelementStart(12, \"div\", 7);\n      i0.ɵɵelement(13, \"input\", 8);\n      i0.ɵɵelementStart(14, \"label\", 9);\n      i0.ɵɵtext(15, \"Check me out\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(16, \"div\", 10);\n      i0.ɵɵelementStart(17, \"input\", 11);\n      i0.ɵɵlistener(\"change\", function LoginComponent_Template_input_change_17_listener($event) {\n        return ctx.checkBoxChanged($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(18, \"label\", 9);\n      i0.ɵɵtext(19, \"Mask Username\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(20, \"button\", 12);\n      i0.ɵɵtext(21, \"Submit\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(22, \"div\");\n      i0.ɵɵtemplate(23, LoginComponent_div_23_Template, 2, 2, \"div\", 13);\n      i0.ɵɵpipe(24, \"async\");\n      i0.ɵɵtemplate(25, LoginComponent_div_25_Template, 2, 1, \"div\", 14);\n      i0.ɵɵpipe(26, \"async\");\n      i0.ɵɵelementEnd();\n    }\n\n    if (rf & 2) {\n      i0.ɵɵadvance(17);\n      i0.ɵɵproperty(\"checked\", ctx.displayCode);\n      i0.ɵɵadvance(6);\n      i0.ɵɵproperty(\"ngForOf\", i0.ɵɵpipeBind1(24, 3, ctx.employee$));\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngIf\", i0.ɵɵpipeBind1(26, 5, ctx.employeeError$));\n    }\n  },\n  directives: [i2.NgForOf, i2.NgIf],\n  pipes: [i2.AsyncPipe],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJsb2dpbi5jb21wb25lbnQuc2NzcyJ9 */\"]\n});","map":{"version":3,"sources":["/Users/ankitkumar/Angular Learnings/NgRx/src/app/login/login.component.ts","/Users/ankitkumar/Angular Learnings/NgRx/src/app/login/login.component.html"],"names":[],"mappings":"AAEA,SAAgB,cAAhB,EAAgC,YAAhC,EAA8C,QAA9C,QAA8D,uBAA9D;AACA,OAAO,KAAK,WAAZ,MAA6B,sBAA7B;;;;;;;ACqBE,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA;AACE,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AAEF,IAAA,EAAA,CAAA,YAAA;;;;;AAFE,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,iBAAA,EAAA,WAAA,CAAA,EAAA,EAAA,kBAAA,EAAA,WAAA,CAAA,aAAA,EAAA,GAAA;;;;;;AAGF,IAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA;AACC,IAAA,EAAA,CAAA,MAAA,CAAA,CAAA;AACD,IAAA,EAAA,CAAA,YAAA;;;;;AADC,IAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,IAAA,EAAA,CAAA,kBAAA,CAAA,WAAA,EAAA,MAAA,CAAA,GAAA,EAAA,GAAA;;;;ADlBH,OAAM,MAAO,cAAP,CAAqB;AAIzB,EAAA,WAAA,CAAoB,KAApB,EAAuC;AAAnB,SAAA,KAAA,GAAA,KAAA;AAHpB,SAAA,WAAA,GAAuB,IAAvB;AAG4C;;AAE5C,EAAA,QAAQ,GAAA;AACN,IAAA,OAAO,CAAC,GAAR,CAAY,yBAAZ,EADM,CAEN;;AACA,SAAK,KAAL,CAAW,MAAX,CAAkB,cAAlB,EAAkC,SAAlC,CAA6C,WAAD,IAAgB;AAC1D;AACC,WAAK,WAAL,GAAmB,WAAnB,CAFyD,CAE1B;AAChC;AACD,KAJD;AAMA,SAAK,SAAL,GAAiB,KAAK,KAAL,CAAW,MAAX,CAAkB,YAAlB,CAAjB;AAEA,SAAK,cAAL,GAAsB,KAAK,KAAL,CAAW,MAAX,CAAkB,QAAlB,CAAtB;AAEA,SAAK,KAAL,CAAW,QAAX,CAAoB,WAAW,CAAC,YAAZ,EAApB;AACD,GApBwB,CAsBzB;;;AACA,EAAA,eAAe,CAAC,KAAD,EAAU;AACxB,SAAK,KAAL,CAAW,QAAX,CAAoB,WAAW,CAAC,cAAZ,EAApB;AACA;;AAzBwB;;;mBAAd,c,EAAc,EAAA,CAAA,iBAAA,CAAA,EAAA,CAAA,KAAA,C;AAAA,C;;;QAAd,c;AAAc,EAAA,SAAA,EAAA,CAAA,CAAA,WAAA,CAAA,C;AAAA,EAAA,KAAA,EAAA,E;AAAA,EAAA,IAAA,EAAA,C;AAAA,EAAA,MAAA,EAAA,CAAA,CAAA,CAAA,EAAA,MAAA,CAAA,EAAA,CAAA,KAAA,EAAA,oBAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA,CAAA,MAAA,EAAA,OAAA,EAAA,IAAA,EAAA,oBAAA,EAAA,kBAAA,EAAA,WAAA,EAAA,CAAA,EAAA,cAAA,CAAA,EAAA,CAAA,IAAA,EAAA,WAAA,EAAA,CAAA,EAAA,WAAA,CAAA,EAAA,CAAA,KAAA,EAAA,uBAAA,EAAA,CAAA,EAAA,YAAA,CAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,IAAA,EAAA,uBAAA,EAAA,CAAA,EAAA,cAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,MAAA,EAAA,YAAA,CAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,IAAA,EAAA,eAAA,EAAA,CAAA,EAAA,kBAAA,CAAA,EAAA,CAAA,KAAA,EAAA,eAAA,EAAA,CAAA,EAAA,kBAAA,CAAA,EAAA,CAAA,CAAA,EAAA,KAAA,EAAA,OAAA,EAAA,YAAA,CAAA,EAAA,CAAA,MAAA,EAAA,UAAA,EAAA,IAAA,EAAA,eAAA,EAAA,CAAA,EAAA,kBAAA,EAAA,CAAA,EAAA,SAAA,EAAA,QAAA,CAAA,EAAA,CAAA,MAAA,EAAA,QAAA,EAAA,CAAA,EAAA,KAAA,EAAA,aAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,EAAA,SAAA,CAAA,EAAA,CAAA,CAAA,EAAA,MAAA,CAAA,C;AAAA,EAAA,QAAA,EAAA,SAAA,uBAAA,CAAA,EAAA,EAAA,GAAA,EAAA;AAAA,QAAA,EAAA,GAAA,CAAA,EAAA;ACX3B,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,MAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA;AAAmD,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,eAAA;AAAa,MAAA,EAAA,CAAA,YAAA;AAChE,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AAAsC,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,gDAAA;AAA8C,MAAA,EAAA,CAAA,YAAA;AACtF,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,CAAA,EAAA,OAAA,EAAA,CAAA;AAAsD,MAAA,EAAA,CAAA,MAAA,CAAA,CAAA,EAAA,UAAA;AAAQ,MAAA,EAAA,CAAA,YAAA;AAC9D,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,OAAA,EAAA,CAAA;AACF,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,CAAA;AACE,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA,EAAA,OAAA,EAAA,CAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,OAAA,EAAA,CAAA;AAAoD,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,cAAA;AAAY,MAAA,EAAA,CAAA,YAAA;AAClE,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA,EAAA,EAAA;AACE,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,OAAA,EAAA,EAAA;AAAmE,MAAA,EAAA,CAAA,UAAA,CAAA,QAAA,EAAA,SAAA,gDAAA,CAAA,MAAA,EAAA;AAAA,eAAU,GAAA,CAAA,eAAA,CAAA,MAAA,CAAV;AAAiC,OAAjC;AAAnE,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,OAAA,EAAA,CAAA;AAAqD,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,eAAA;AAAa,MAAA,EAAA,CAAA,YAAA;AACpE,MAAA,EAAA,CAAA,YAAA;AACF,MAAA,EAAA,CAAA,YAAA;AACA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,QAAA,EAAA,EAAA;AAA8C,MAAA,EAAA,CAAA,MAAA,CAAA,EAAA,EAAA,QAAA;AAAM,MAAA,EAAA,CAAA,YAAA;AACtD,MAAA,EAAA,CAAA,YAAA;AAEA,MAAA,EAAA,CAAA,cAAA,CAAA,EAAA,EAAA,KAAA;AACE,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,8BAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA;;AAIA,MAAA,EAAA,CAAA,UAAA,CAAA,EAAA,EAAA,8BAAA,EAAA,CAAA,EAAA,CAAA,EAAA,KAAA,EAAA,EAAA;;AAGF,MAAA,EAAA,CAAA,YAAA;;;;AAf4G,MAAA,EAAA,CAAA,SAAA,CAAA,EAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,GAAA,CAAA,WAAA;AAQhF,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,SAAA,EAAA,EAAA,CAAA,WAAA,CAAA,EAAA,EAAA,CAAA,EAAA,GAAA,CAAA,SAAA,CAAA;AAIpB,MAAA,EAAA,CAAA,SAAA,CAAA,CAAA;AAAA,MAAA,EAAA,CAAA,UAAA,CAAA,MAAA,EAAA,EAAA,CAAA,WAAA,CAAA,EAAA,EAAA,CAAA,EAAA,GAAA,CAAA,cAAA,CAAA","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Store } from '@ngrx/store';\nimport { State, getMaskedValue, getEmployees, getError } from './state/login.reducer';\nimport * as LoginAction from './state/login.action';\nimport { Observable } from 'rxjs';\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  displayCode: boolean = true;\n  employee$: Observable<any> | null | undefined;\n  employeeError$: Observable<any> | undefined;\n  constructor(private store: Store<State>) { }\n\n  ngOnInit(): void {\n    console.log(\"Inside logger component\");\n    // Here we were hardcoding the login part so now will remove it with the selector\n    this.store.select(getMaskedValue).subscribe((maskedValue) => {\n      //if(response) { because we have initilaized the initial state.\n       this.displayCode = maskedValue;// As masked value is directly getting returned so directly binding the value.\n      //}\n    })\n\n    this.employee$ = this.store.select(getEmployees);\n\n    this.employeeError$ = this.store.select(getError);\n\n    this.store.dispatch(LoginAction.loadEmployee());\n  }\n\n  //changing the hardcoded state to the new export created for action\n  checkBoxChanged(event:any) {\n   this.store.dispatch(LoginAction.toggleUsername());\n  }\n}\n","<form>\n  <div class=\"mb-3\">\n    <label for=\"exampleInputEmail1\" class=\"form-label\">Email address</label>\n    <input type=\"email\" class=\"form-control\" id=\"exampleInputEmail1\" aria-describedby=\"emailHelp\">\n    <div id=\"emailHelp\" class=\"form-text\">We'll never share your email with anyone else.</div>\n  </div>\n  <div class=\"mb-3\">\n    <label for=\"exampleInputPassword1\" class=\"form-label\">Password</label>\n    <input type=\"password\" class=\"form-control\" id=\"exampleInputPassword1\">\n  </div>\n  <div class=\"row\">\n    <div class=\"col mb-3 form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck1\">\n      <label class=\"form-check-label\" for=\"exampleCheck1\">Check me out</label>\n    </div>\n    <div class=\"col @mb-3 form-check\">\n      <input type=\"checkbox\" class=\"form-check-input\" id=\"exampleCheck2\" (change)=\"checkBoxChanged($event)\" [checked]=\"displayCode\">\n      <label class=\"form-check-label\" for=\"exampleCheck1\" >Mask Username</label>\n    </div>\n  </div>\n  <button type=\"submit\" class=\"btn btn-primary\">Submit</button>\n</form>\n\n<div>\n  <div *ngFor=\"let employee of employee$ | async;let i =index\">\n    Employee Id : {{employee.id}}\n    Employee Name: {{ employee.employee_name}}\n  </div>\n  <div *ngIf=\"employeeError$ | async as employeeError\">\n   Error :  {{ emp}}\n  </div>\n</div>\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}